package eu.infolead.jtk.anomaly.http;

import java.net.URI;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

import eu.infolead.jtk.fp.either.Maybe;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * This interface represents the common error format defined by
 * <a href="https://www.rfc-editor.org/rfc/rfc7807">RFC 7807</a>.
 * 
 * <h1>References</h1>
 * <ul>
 * <li><a href="https://www.rfc-editor.org/rfc/rfc7807">RFC 7807</a>
 * </ul>
 */
public sealed interface ProblemDetail permits StandardProblemDetail, MultiStatusProblemDetail {

    /**
     * A URI reference [RFC3986] that identifies the
     * problem type.
     * 
     * <p>
     * <a href="https://www.rfc-editor.org/rfc/rfc7807">RFC 7807</a> encourages
     * that, when
     * dereferenced, it provide human-readable documentation for the
     * problem type (e.g., using HTML [W3C.REC-html5-20141028]). When
     * this member is not present, its value is assumed to be
     * "about:blank".
     * <p>
     * Consumers MUST use the "type" string as the primary identifier for
     * the problem type; the "title" string is advisory and included only
     * for users who are not aware of the semantics of the URI and do not
     * have the ability to discover them (e.g., offline log analysis).
     * <p>
     * Consumers SHOULD NOT automatically dereference the type URI.
     * <p>
     * This member accepts relative URIs; this means
     * that they must be resolved relative to the document's base URI, as
     * per <a href="https://www.rfc-editor.org/rfc/rfc3986#section-5">RFC 3986,
     * Section 5</a>.
     * <p>
     * Changing the type is a breaking API change by definition. A consumer may thus
     * reliably
     * distinguish different problem types from each other using this member.
     * 
     * <h3>Predefined Problem Types</h3>
     * The {@code about:blank} URI
     * <a href="https://www.rfc-editor.org/rfc/rfc6694">RFC
     * 6694</a>, when used as a problem type,
     * indicates that the problem has no additional semantics beyond that of
     * the HTTP status code.
     * 
     * When {@code about:blank} is used, the title SHOULD be the same as the
     * recommended HTTP status phrase for that code (e.g., {@code Not Found} for
     * {@code 404}, and so on), although it MAY be localized to suit client
     * preferences (expressed with the Accept-Language request header).
     * <em>TODO</em> Make sure that implementations respect this automatically.
     * 
     * @return the problem type URI. Never null.
     */
    @JsonProperty("type")
    URI getProblemType();

    /**
     * A short, human-readable summary of the problem
     * type.
     * <p>
     * It SHOULD NOT change from occurrence to occurrence of the
     * problem, except for purposes of localization.
     * <p>
     * The "title" string is advisory and included only
     * for users who are not aware of the semantics of the URI and do not
     * have the ability to discover them (e.g., offline log analysis).
     * <p>
     * Consumers SHOULD NOT automatically dereference the type URI.
     * <p>
     * This can be changed without breaking the API.
     * 
     * @return a {@link Maybe} with the title
     */
    @JsonProperty("title")
    @JsonInclude(Include.NON_EMPTY)
    Maybe<String> getProblemTypeTitle();

    /**
     * The HTTP status code
     * (<a href="https://www.rfc-editor.org/rfc/rfc7231#section-6">RFC7231,
     * SectionÂ 6</a>)
     * generated by the origin server for this occurrence of the problem.
     * <p>
     * 
     * The "status" member, if present, is only advisory; it conveys the
     * HTTP status code used for the convenience of the consumer.
     * <p>
     * Generators MUST use the same status code in the actual HTTP response,
     * to assure that generic HTTP software that does not understand this
     * format (the whole problem detail structure) still behaves correctly. See
     * <a href="https://www.rfc-editor.org/rfc/rfc7807#section-5">RFC 7807, Section
     * 5</a> for further caveats
     * regarding its use.
     * <p>
     * <em>TODO: </em>
     * Implement a request filter that checks in outgoing responses
     * if both status codes from this structure and from HTTP headers are equal, and
     * log if not.
     * <p>
     * Consumers can use the status member to determine what the original
     * status code used by the generator was, in cases where it has been
     * changed (e.g., by an intermediary or cache), and when message bodies
     * persist without HTTP information. Generic HTTP software will still
     * use the HTTP status code conveyed in the HTTP headers instead of this one.
     * <p>
     * This HTTP status is only advisory, as it may differ from the actual HTTP
     * status code from the HTTP headers. Therefore, this can be changed without
     * breaking the
     * API.
     * 
     * @return a {@link Maybe} with the status
     */
    @JsonProperty("status")
    @JsonInclude(Include.NON_EMPTY)
    Maybe<Integer> getHttpStatus();

    /**
     * A human-readable explanation specific to this
     * occurrence of the problem.
     * 
     * <p>
     * The "detail" member, if present, ought to focus on helping the client
     * correct the problem, rather than giving debugging information.
     * <p>
     * Consumers SHOULD NOT parse the "detail" member for information;
     * extensions of this interface are more suitable and less error-prone ways to
     * obtain such information.
     * <p>
     * This can be changed without breaking the API.
     * 
     * @return a {@link Maybe} with the detail.
     */
    @JsonProperty("detail")
    @JsonInclude(Include.NON_EMPTY)
    Maybe<String> getFullDetail();

    /**
     * A URI reference that identifies the specific
     * occurrence of the problem. It may or may not yield further
     * information if dereferenced.
     * 
     * <p>
     * This member accepts relative URIs; this means
     * that they must be resolved relative to the document's base URI, as
     * per <a href="https://www.rfc-editor.org/rfc/rfc3986#section-5">RFC 3986,
     * Section 5</a>.
     * <p>
     * This can be changed without breaking the API.
     * 
     * @return a {@link Maybe} with the instance URI
     */
    @JsonProperty("instance")
    @JsonInclude(Include.NON_EMPTY)
    Maybe<URI> getProblemInstanceId();

    /**
     * Validates this ProblemDetail according to RFC 7807 constraints.
     * 
     * @return true if this ProblemDetail is valid, false otherwise
     */
    default boolean isValid() {
        return getProblemType() != null;
    }

    /**
     * Checks if this ProblemDetail uses the "about:blank" problem type.
     * 
     * @return true if this uses the "about:blank" type, false otherwise
     */
    default boolean isAboutBlank() {
        return "about:blank".equals(getProblemType().toString());
    }

    /**
     * Checks if this ProblemDetail has a specific HTTP status code.
     * 
     * @param expectedStatus the expected HTTP status code
     * @return true if the status matches, false otherwise
     */
    default boolean hasHttpStatus(int expectedStatus) {
        return getHttpStatus().fold(
            v -> false,
            status -> status.equals(expectedStatus)
        );
    }
}
